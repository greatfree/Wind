
List of programming languages by type
From Wikipedia, the free encyclopedia
Jump to navigationJump to search
Programming language
lists
Alphabetical
Categorical
Chronological
Generational
vte
This is a list of notable programming languages, grouped by type.

There is no overarching classification scheme for programming languages. Thus, in many cases, a language is listed under multiple headings.


Contents
1	Array languages
2	Assembly languages
3	Authoring languages
4	Constraint programming languages
5	Command line interface languages
6	Compiled languages
7	Concurrent languages
8	Curly-bracket languages
9	Dataflow languages
10	Data-oriented languages
11	Decision table languages
12	Declarative languages
13	Embeddable languages
13.1	In source code
13.1.1	Server side
13.1.2	Client side
13.2	In object code
14	Educational languages
15	Esoteric languages
16	Extension languages
17	Fourth-generation languages
18	Functional languages
18.1	Pure
18.2	Impure
19	Hardware description languages
19.1	HDLs for analog circuit design
19.2	HDLs for digital circuit design
20	Imperative languages
21	Interactive mode languages
22	Interpreted languages
23	Iterative languages
24	Languages by memory management type
24.1	Garbage collected languages
24.2	Languages with manual memory management
24.3	Languages with deterministic memory management
24.4	Languages with automatic reference counting (ARC)
25	List-based languages – LISPs
26	Little languages
27	Logic-based languages
28	Machine languages
29	Macro languages
29.1	Textual substitution macro languages
29.2	Application macro languages
30	Metaprogramming languages
31	Multiparadigm languages
32	Numerical analysis
33	Non-English-based languages
34	Object-oriented class-based languages
34.1	Multiple dispatch
34.2	Single dispatch
35	Object-oriented prototype-based languages
36	Off-side rule languages
37	Procedural languages
38	Query languages
39	Reflective Language
40	Rule-based languages
41	Scripting languages
42	Stack-based languages
43	Synchronous languages
44	Shading languages
44.1	Real-time rendering
44.2	Offline rendering
45	Syntax handling languages
46	System languages
47	Transformation languages
48	Visual languages
49	Wirth languages
50	XML-based languages
51	See also
52	Notes
53	References
Array languages
Main category: Array programming languages
Array programming (also termed vector or multidimensional) languages generalize operations on scalars to apply transparently to vectors, matrices, and higher-dimensional arrays.

A+
Analytica
APL
Chapel
Fortran 90
Freemat
GAUSS
Interactive Data Language (IDL)
J
Julia
K
MATLAB
Octave
Q
R
S
S-Lang
SequenceL
Speakeasy
Wolfram Language
X10
ZPL
Assembly languages
Main article: Assembly language
Assembly languages directly correspond to a machine language (see below) so machine code instructions appear in a form understandable by humans. Assembly languages let programmers use symbolic addresses, which the assembler converts to absolute addresses. Most assemblers also support macros and symbolic constants.

Authoring languages
Main article: Authoring language
An authoring language is a programming language used to create tutorials, websites, and other interactive computer programs.

Darwin Information Typing Architecture (DITA)
Lasso
PILOT
TUTOR
Constraint programming languages
Main article: Constraint programming
A constraint programming language is a declarative programming language where relationships between variables are expressed as constraints. Execution proceeds by attempting to find values for the variables which satisfy all declared constraints.

ECLiPSe
Command line interface languages
Command-line interface (CLI) languages are also called batch languages or job control languages. Examples:

4DOS (extended command-line shell for IBM PCs)
bash (the Bourne-Again shell from GNU, Free Software Foundation (FSF))
CLIST (MVS Command List)
CMS EXEC
csh and tcsh (C-like shell from Bill Joy at UC Berkeley)
DIGITAL Command Language (DCL) – standard CLI language for VMS (DEC, Compaq, HP)
DOS batch language (standard CLI/batch language for the IBM PC running DOS operating systems, popular before Windows)
EXEC 2
Expect (a Unix automation and test tool)
fish (a Unix shell)
Hamilton C shell (a C shell for Windows)
JCL (punch card-oriented batch control language for IBM System/360 family mainframes)
ksh (a standard Unix shell, written by David Korn)
Rc (command-line shell for Plan 9)
Rexx
sh (the standard Unix shell, written by Stephen R. Bourne)
TACL (Tandem Advanced Command Language)
Windows batch language (Windows batch file language as understood by COMMAND.COM and CMD.EXE)
Windows PowerShell (.NET-based CLI)
zsh (a Unix shell)
Compiled languages
These are languages typically processed by compilers, though theoretically any language can be compiled or interpreted[citation needed]. See also compiled language.

ActionScript
Ada (multi-purpose language)
ALGOL (very influential language design; the second high level language compiler)
SMALL Machine ALGOL Like Language
Ballerina (compiled to bytecode specific to the Ballerina Runtime (BVM))
BASIC (some dialects, including the first version of Dartmouth BASIC)
BCPL
C (one of the most widely used procedural languages)
C++ (widely used multiparadigm language derived from C)
C# (compiled into CIL, generates a native image at runtime)
Ceylon (compiled into JVM bytecode)
CHILL
CLIPPER 5.3 (programming Language for DOS-based software)
CLEO (Clear Language for Expressing Orders) on the British Leo computers
COBOL
Cobra
Common Lisp
Crystal
Curl
D (from a reengineering of C++)
DASL compiles into Java, JavaScript, JSP, Flex, etc. as .war file
Delphi (Borland's Object Pascal development system)
DIBOL (Digital Interactive Business Oriented Language)
Dylan
eC
Eiffel (object-oriented language developed by Bertrand Meyer)
Sather
Ubercode
Elm
Emacs Lisp
Emerald
Erlang
F# (compiled into CIL, to generate runtime image
Factor
Forth (professional systems, like VFX and SwiftForth)
Fortran (the first high-level, compiled language, from IBM's John Backus)
GAUSS
Go
Gosu (compiled into JVM bytecode)
Groovy (compiled into JVM bytecode)
Haskell
Harbour
Java (usually compiled into JVM bytecode although ahead-of-time (AOT) compilers exist that compile to machine code)
JOVIAL
Julia (Compiled on the fly to machine code)
LabVIEW
Mercury
Mesa
Nemerle (compiled into intermediate language bytecode)
Nim
Objective-C
P
Pascal (most implementations)
PL/I (general purpose language, originally for IBM mainframes)
Plus
Python (compiles to intermediate VM bytecode)
RPG (Report Program Generator)
Rust
Scala (compiled into JVM bytecode)
Scheme (some implementations, e.g. Gambit)
SequenceL – purely functional, automatically parallelizing and race-free
Simula (first object-oriented language, a superset of ALGOL 60)
Smalltalk compiles to platform independent bytecode for a Virtual Machine
Swift
ML
Standard ML (SML)
Alice
OCaml
Turing
Vala (compiler for the GObject type system)
Visual Basic (use Common Intermediate Language (CIL) that is JIT compiled into a native runtime)
Visual FoxPro
Visual Prolog
Xojo
Concurrent languages
Main category: Concurrent programming languages
For a more comprehensive list, see List of concurrent and parallel programming languages.
Message passing languages provide language constructs for concurrency. The predominant paradigm for concurrency in mainstream languages such as Java is shared memory concurrency. Concurrent languages that make use of message passing have generally been inspired by process calculi such as communicating sequential processes (CSP) or the π-calculus.

Ada – multi-purpose language
Alef – concurrent language with threads and message passing, used for systems programming in early versions of Plan 9 from Bell Labs
Ateji PX an extension of the Java language for parallelism
Ballerina - a language designed for implementing and orchestrating micro-services. Provides a message based parallel-first concurrency model.
ChucK – domain specific programming language for audio, precise control over concurrency and timing
Cilk – a concurrent C
Cω – C Omega, a research language extending C#, uses asynchronous communication
Clojure – a dialect of Lisp for the Java virtual machine
Chapel
Co-array Fortran
Concurrent Pascal (by Brinch-Hansen)
Curry
E – uses promises, ensures deadlocks cannot occur
Eiffel (through the SCOOP mechanism, Simple Concurrent Object-Oriented Computation)
Elixir (runs on the Erlang VM)
Emerald - uses threads and monitors
Erlang – uses asynchronous message passing with nothing shared
Gambit Scheme - using the Termite library
Go
Java
Join Java – concurrent language based on Java
X10
Julia
Joule – dataflow language, communicates by message passing
Limbo – relative of Alef, used for systems programming in Inferno (operating system)
MultiLisp – Scheme variant extended to support parallelism
occam – influenced heavily by Communicating Sequential Processes (CSP)
occam-π – a modern variant of occam, which incorporates ideas from Milner's π-calculus
Orc
Oz – multiparadigm language, supports shared-state and message-passing concurrency, and futures, and Mozart Programming System cross-platform Oz
P
Pict – essentially an executable implementation of Milner's π-calculus
Rust
Scala – implements Erlang-style actors on the JVM
SequenceL – purely functional, automatically parallelizing and race-free
SR – research language
Unified Parallel C
XProc – XML processing language, enabling concurrency
Curly-bracket languages
Curly-bracket or curly-brace programming languages have a syntax that defines statement blocks using the curly bracket or brace characters { and }. This syntax originated with BCPL (1966), and was popularized by C. Many curly-bracket languages descend from or are strongly influenced by C. Examples of curly-bracket languages include:

ABCL/c+
Alef
Limbo
Go
AWK
B
bc
BCPL
Ballerina
C – developed circa 1970 at Bell Labs
C++
C#
Ceylon
ChucK – audio programming language
Cilk – concurrent C for multithreaded parallel programming
Cyclone – a safer C variant
D
Dart
DASL – based on Java
E
eC
ECMAScript
ActionScript
ECMAScript for XML
JavaScript
JScript
TypeScript
GLSL
HLSL
ICI
Java
Processing
Groovy
Join Java
Kotlin
Tea
X10
LPC
MEL
Nemerle – combines C# and ML features, provides syntax extension abilities
PCASTL
Perl
PHP
Pico
Pike
PowerShell
R
Rust
S-Lang
Scala
sed
SuperCollider
Swift
UnrealScript
Yorick
Dataflow languages
Dataflow programming languages rely on a (usually visual) representation of the flow of data to specify the program. Frequently used for reacting to discrete events or for processing streams of data. Examples of dataflow languages include:

Analytica
BMDFM
Hartmann pipelines
G (used in LabVIEW)
Lucid
Max
Oz
Prograph
Pure Data
Reaktor
StreamBase StreamSQL EventFlow
VEE
VHDL
VisSim
Vvvv
WebMethods Flow
Ballerina
Swift (parallel scripting language)
Data-oriented languages
Data-oriented languages provide powerful ways of searching and manipulating the relations that have been described as entity relationship tables which map one set of things into other sets.[citation needed] Examples of data-oriented languages include:

Clarion
Clipper
dBase a relational database access language
Gremlin
MUMPS (an ANSI standard general purpose language with specializations for database work)
Caché (similar to MUMPS)
RDQL
SPARQL
SQL
Tutorial D – see also The Third Manifesto
Visual FoxPro – a native RDBMS engine, object-oriented, RAD
WebDNA
Wolfram Language
Decision table languages
Decision tables can be used as an aid to clarifying the logic before writing a program in any language, but in the 1960s a number of languages were developed where the main logic is expressed directly in the form of a decision table, including:

Filetab
Declarative languages
Main category: Declarative programming languages
Declarative languages express the logic of a computation without describing its control flow in detail. Declarative programming stands in contrast to imperative programming via imperative programming languages, where control flow is specified by serial orders (imperatives). (Pure) functional and logic-based programming languages are also declarative, and constitute the major subcategories of the declarative category. This section lists additional examples not in those subcategories.

Analytica
Ant (combine declarative programming and imperative programming)
Cypher
Distributed Application Specification Language (DASL) (combine declarative programming and imperative programming)
ECL
Gremlin
Lustre
Mercury
MetaPost
Modelica
Prolog
QML
Oz
RDQL
SequenceL – purely functional, automatically parallelizing and race-free
SPARQL
SQL
Wolfram Language
xBase
XSL Transformations
Embeddable languages
In source code
Source embeddable languages embed small pieces of executable code inside a piece of free-form text, often a web page.

Client-side embedded languages are limited by the abilities of the browser or intended client. They aim to provide dynamism to web pages without the need to recontact the server.

Server-side embedded languages are much more flexible, since almost any language can be built into a server. The aim of having fragments of server-side code embedded in a web page is to generate additional markup dynamically; the code itself disappears when the page is served, to be replaced by its output.

Server side
PHP
VBScript
SMX – dedicated to web pages
Tcl – server-side in NaviServer and an essential component in electronics industry systems
WebDNA – dedicated to database-driven websites
The above examples are particularly dedicated to this purpose. A large number of other languages, such as Erlang, Scala, Perl and Ruby can be adapted (for instance, by being made into Apache modules).

Client side
ActionScript
JavaScript (aka ECMAScript or JScript)
VBScript (Windows only)
In object code
A wide variety of dynamic or scripting languages can be embedded in compiled executable code. Basically, object code for the language's interpreter needs to be linked into the executable. Source code fragments for the embedded language can then be passed to an evaluation function as strings. Application control languages can be implemented this way, if the source code is input by the user. Languages with small interpreters are preferred.

AngelScript
Ch
EEL
Io
Julia
Lua
MiniD
Python
Ruby (via mruby)
Squirrel
Tcl
Educational languages
For a more comprehensive list, see List of educational programming languages.
Languages developed primarily for the purpose of teaching and learning of programming.

Alice
Blockly
COMAL
Elan
Emerald
Logo
KTurtle
Modula-2
Pascal
Python
Racket
Scheme
Scratch
Snap!
Turing
Wolfram Language
Esoteric languages
Main category: Esoteric programming languages
An esoteric programming language is a programming language designed as a test of the boundaries of computer programming language design, as a proof of concept, or as a joke.

Beatnik
Befunge
Brainfuck
Chef
INTERCAL
LOLCODE
Malbolge
Piet
Shakespeare
Whitespace
Extension languages
Extension programming languages are languages embedded into another program and used to harness its features in extension scripts.

AutoLISP (specific to AutoCAD)
BeanShell
CAL
C/AL (C/SIDE)
Guile
Emacs Lisp
JavaScript and some dialects, e.g., JScript
Lua (embedded in many games)
OpenCL (extension of C and C++ to use the GPU and parallel extensions of the CPU)
OptimJ (extension of Java with language support for writing optimization models and powerful abstractions for bulk data processing)
Perl
Pike
Python (embedded in Maya, Blender, and other 3-D animation packages)
Rexx
Ruby (Google SketchUp)
S-Lang
SQL
Squirrel
Tcl
Vim script
Visual Basic for Applications (VBA)
Windows PowerShell
Fourth-generation languages
Main category: 4GL
Fourth-generation programming languages are high-level languages built around database systems. They are generally used in commercial environments.

1C:Enterprise programming language
ABAP
CorVision
CSC's GraphTalk
CA-IDEAL (Interactive Development Environment for an Application Life) for use with CA-DATACOM/DB
Easytrieve report generator (now CA-Easytrieve Plus)
FOCUS
IBM Informix-4GL
LINC 4GL
MAPPER (Unisys/Sperry) – now part of BIS
MARK-IV (Sterling/Informatics) now VISION:BUILDER of CA
NATURAL
Progress 4GL
PV-Wave
LiveCode (not based on a database; still, the goal is to work at a higher level of abstraction than 3GLs)
SAS
SQL
Ubercode (VHLL, or Very High Level Language)
Uniface
Visual DataFlex
Visual FoxPro
xBase
Functional languages
Main category: Functional languages
Functional programming languages define programs and subroutines as mathematical functions and treat them as first-class. Many so-called functional languages are "impure", containing imperative features. Many functional languages are tied to mathematical calculation tools. Functional languages include:

Pure
Agda
Clean
Coq (Gallina)
Cuneiform
Curry
Elm
Futhark
Haskell
Hope
Idris
Joy
Mercury
Miranda
PureScript
Ur
KRC
SAC
SASL
SequenceL
Impure
APL
ATS
CAL
C++ (since C++11)
C#
Ceylon
D
Dart
Curl
ECMAScript
ActionScript
ECMAScript for XML
JavaScript
JScript
Source
Erlang
Elixir
LFE
F#
Groovy
Hop
J
Java (since version 8)
Julia
Kotlin
Lisp
Clojure
Common Lisp
Dylan
Emacs Lisp
LFE
Little b
Logo
Scheme
Racket (formerly PLT Scheme)
Tea
Mathematica
ML
Standard ML (SML)
Alice
OCaml
Nemerle
Nim
Opal
OPS5
Perl
PHP
Python
Q (equational programming language)
Q (programming language from Kx Systems)
R
Raku
REBOL
Red
Ruby
REFAL
Rust
Scala
Spreadsheets
Tcl
Wolfram Language
Hardware description languages
For a more comprehensive list, see List of hardware description languages.
In electronics, a hardware description language (HDL) is a specialized computer language used to describe the structure, design, and operation of electronic circuits, and most commonly, digital logic circuits. The two most widely used and well-supported HDL varieties used in industry are Verilog and VHDL. Hardware description languages include:

HDLs for analog circuit design
Verilog-AMS (Verilog for Analog and Mixed-Signal)
VHDL-AMS (VHDL with Analog/Mixed-Signal extension)
HDLs for digital circuit design
Advanced Boolean Expression Language(ABEL)
Altera Hardware Description Language(AHDL)
Bluespec
Confluence
ELLA
ESys.net
Handel-C
Impulse C
JHDL
Lava
Lola
M
MyHDL
PALASM
Ruby (hardware description language)
SystemC
SystemVerilog
Verilog
VHDL (VHSIC HDL)
Imperative languages
Imperative programming languages may be multi-paradigm and appear in other classifications. Here is a list of programming languages that follow the imperative paradigm:

Ada
ALGOL
BASIC
C
C++
C#
Ceylon
CHILL
COBOL
D
ECMAScript
ActionScript
ECMAScript for XML
JavaScript
JScript
Source
FORTRAN
GAUSS
Go
Groovy
Java
Julia
Lua
MATLAB
Machine language
Modula-2, Modula-3
MUMPS
Nim
OCaml
Oberon
Object Pascal
Pascal
Perl
PHP
PL/I
PowerShell
PROSE
Python
Ruby
Rust
Speakeasy
Swift
Tcl
Wolfram Language
Interactive mode languages
Interactive mode languages act as a kind of shell: expressions or statements can be entered one at a time, and the result of their evaluation is seen immediately. The interactive mode is also termed a read–eval–print loop (REPL).

APL
BASIC (some dialects)
Clojure
Common Lisp
Dart (with Observatory or Dartium's developer tools)
ECMAScript
ActionScript
ECMAScript for XML
JavaScript
JScript
Source
Erlang
Elixir (with iex)
F#
Forth
Fril
GAUSS
Groovy
Haskell (with the GHCi or Hugs interpreter)
IDL
J
Java (since version 9)
Julia
Lua
MUMPS (an ANSI standard general purpose language)
Maple
Mathematica (Wolfram language)
MATLAB
ML
OCaml
Perl
PHP
Pike
PostScript
Prolog
Python
PROSE
R
REBOL
Rexx
Ruby (with IRB)
Scala
Scheme
Smalltalk (anywhere in a Smalltalk environment)
S-Lang (with the S-Lang shell, slsh)
Speakeasy
Swift
Tcl (with the Tcl shell, tclsh)
Unix shell
Windows PowerShell (.NET-based CLI)
Visual FoxPro
Interpreted languages
Interpreted languages are programming languages in which programs may be executed from source code form, by an interpreter. Theoretically, any language can be compiled or interpreted, so the term interpreted language generally refers to languages that are usually interpreted rather than compiled.

Ant
APL
AutoHotkey scripting language
AutoIt scripting language
BASIC (some dialects)
Programming Language for Business (PL/B, formerly DATABUS, later versions added optional compiling)
DM
Eiffel (via Melting Ice Technology in EiffelStudio)
Emacs Lisp
Forth (interactive shell only, otherwise compiled to native or threaded code)
GameMaker Language
Groovy
J
Julia (compiled on the fly to machine code, but a transpiler Julia2C exists)
JavaScript
Lisp (early versions, pre-1962, and some experimental ones; production Lisp systems are compilers, but many of them still provide an interpreter if needed)
LPC
Lua
MUMPS (an ANSI standard general purpose language)
Maple
Mathematica
MATLAB
OCaml
Pascal (early implementations)
PCASTL
Perl
PHP
PostScript
PowerShell
PROSE
Python
Rexx
R
REBOL
Ruby
S-Lang
Speakeasy
Standard ML (SML)
Spin
Tcl
Tea
TorqueScript
thinBasic scripting language
VBScript
Windows PowerShell – .NET-based CLI
Wolfram Language
Some scripting languages – below
Iterative languages
Iterative languages are built around or offering generators.

Aldor
Alphard
C#
CLU
Cobra
Eiffel, through "agents"
Icon
IPL-v
Julia
Lua
Nim
PHP
Python
Sather
Languages by memory management type
Garbage collected languages
[icon]	
This section needs expansion. You can help by adding to it. (November 2016)
C#
ECMAScript
ActionScript
ECMAScript for XML
JavaScript
JScript
Source
Emerald
Erlang
Go
Groovy
Java
Kotlin
Lisp (originator)
Arc
Clojure
Common Lisp
Dylan
Emacs Lisp
Racket
Scheme
Logo
Haskell
Lua
ML
Standard ML (SML)
Alice
OCaml
Perl
PHP
PowerShell
Python
Ruby
Smalltalk
Languages with manual memory management
[icon]	
This section needs expansion. You can help by adding to it. (November 2016)
Ada
C
C++
Fortran
Pascal
Rust
Objective-C
Languages with deterministic memory management
[icon]	
This section needs expansion. You can help by adding to it. (April 2018)
Ada
C
C++
Fortran
Pascal
Rust[1][2]
Objective-C
Languages with automatic reference counting (ARC)
[icon]	
This section needs expansion. You can help by adding to it. (September 2018)
Objective-C
Swift
Visual Basic
Xojo
List-based languages – LISPs
List-based languages are a type of data-structured language that are based on the list data structure.

Lisp
Arc
Clojure
Common Lisp
Dylan
Emacs Lisp
Racket
Scheme
Logo
Joy
R
Source
Tcl
Tea
TRAC
Little languages
Little languages[3] serve a specialized problem domain.

awk – can serve as a prototyping language for C (shares similar syntax)
Comet – used to solve complex combinatorial optimization problems in areas such as resource allocation and scheduling
sed – parses and transforms text
SQL – has only a few keywords, and not all the constructs needed for a full programming language[a] – many database management systems extend SQL with additional constructs as a stored procedure language
Logic-based languages
Main category: Logic programming languages
Logic-based languages specify a set of attributes that a solution must have, rather than a set of steps to obtain a solution.

Examples:

ALF
Alma-0
CLACL (CLAC-Language)
Curry
Fril
Janus
λProlog (a logic programming language featuring polymorphic typing, modular programming, and higher-order programming)
Oz, and Mozart Programming System cross-platform Oz
Prolog (formulates data and the program evaluation mechanism as a special form of mathematical logic called Horn logic and a general proving mechanism called logical resolution)
Mercury (based on Prolog)
Visual Prolog (object-oriented Prolog extension)
ROOP
Machine languages
Machine languages are directly executable by a computer's CPU. They are typically formulated as bit patterns, usually represented in octal or hexadecimal. Each bit pattern causes the circuits in the CPU to execute one of the fundamental operations of the hardware. The activation of specific electrical inputs (e.g., CPU package pins for microprocessors), and logical settings for CPU state values, control the processor's computation. Individual machine languages are specific to a family of processors; machine-language code for one family of processors cannot run directly on processors in another family unless the processors in question have additional hardware to support it (for example, DEC VAX processors included a PDP-11 compatibility mode). They are (essentially) always defined by the CPU developer, not by 3rd parties. The symbolic version, the processor's assembly language, is also defined by the developer, in most cases. Some commonly used machine code instruction sets are:

ARM
Original 32-bit
16-bit Thumb instructions (subset or registers used)
64-bit (major architecture change, more registers)
DEC:
18-bit: PDP-1, PDP-4, PDP-7, PDP-9, PDP-15
12-bit: PDP-5, PDP-8, LINC-8, PDP-12
36-bit: PDP-6, PDP-10, DECSYSTEM-20
16-bit: PDP-11 (influenced VAX and M68000)
32-bit: VAX
64-bit: Alpha
Intel 8008, 8080 and 8085
Zilog Z80
x86:
16-bit x86, first used in the Intel 8086
Intel 8086 and 8088 (the latter was used in the first and early IBM PC)
Intel 80186
Intel 80286 (the first x86 processor with protected mode, used in the IBM AT)
IA-32, introduced in the 80386
x86-64 The original specification was created by AMD. There are vendor variants, but they're essentially the same:
AMD's AMD64
Intel's Intel 64
IBM System/360 and successors, including z/Architecture
MIPS
Motorola 6800
Motorola 68000 family (CPUs used in early Apple Macintosh and early Sun computers)
MOS Technology 65xx
6502 (CPU for VIC-20, Apple II, and Atari 800)
6510 (CPU for Commodore 64)
Western Design Center 65816/65802 (CPU for Apple IIGS and (variant) Super Nintendo Entertainment System)
National NS320xx
POWER, first used in the IBM RS/6000
PowerPC – used in Power Macintosh and in many game consoles, particularly of the seventh generation.
Power ISA
Sun, Oracle SPARC
MCST Elbrus 2000
Macro languages
Main category: Macro programming languages
Textual substitution macro languages
Macro languages transform one source code file into another. A "macro" is essentially a short piece of text that expands into a longer one (not to be confused with hygienic macros), possibly with parameter substitution. They are often used to preprocess source code. Preprocessors can also supply facilities like file inclusion.

Macro languages may be restricted to acting on specially labeled code regions (pre-fixed with a # in the case of the C preprocessor). Alternatively, they may not, but in this case it is still often undesirable to (for instance) expand a macro embedded in a string literal, so they still need a rudimentary awareness of syntax. That being the case, they are often still applicable to more than one language. Contrast with source-embeddable languages like PHP, which are fully featured.

cpp (the C preprocessor)
m4 (originally from AT&T, bundled with Unix)
ML/I (general purpose macro processor)
Application macro languages
Scripting languages such as Tcl and ECMAScript (ActionScript, ECMAScript for XML, JavaScript, JScript) have been embedded into applications. These are sometimes called "macro languages", although in a somewhat different sense to textual-substitution macros like m4.

Metaprogramming languages
Metaprogramming is the writing of programs that write or manipulate other programs, including themselves, as their data or that do part of the work that is otherwise done at run time during compile time. In many cases, this allows programmers to get more done in the same amount of time as they would take to write all the code manually.

C++
CWIC
Curl
D
eC
Emacs Lisp
Elixir
Forth
F#
Groovy
Haskell
Julia
Lisp
Lua
Maude system
Mathematica
META II (and META I, a subset)
MetaOCaml
Nemerle
Nim
Perl
Python
Ruby
Rust[4]
Scheme
SequenceL
Smalltalk
Source
TREEMETA
Wolfram Language
Multiparadigm languages
Main article: Comparison of multi-paradigm programming languages
Multiparadigm languages support more than one programming paradigm. They allow a program to use more than one programming style. The goal is to allow programmers to use the best tool for a job, admitting that no one paradigm solves all problems in the easiest or most efficient way.

1C:Enterprise programming language (generic, imperative, object-oriented, prototype-based, functional)
Ada (concurrent, distributed, generic (template metaprogramming), imperative, object-oriented (class-based))
ALF (functional, logic)
Alma-0 (constraint, imperative, logic)
APL (functional, imperative, object-oriented (class-based))
BETA (functional, imperative, object-oriented (class-based))
C++ (generic, imperative, object-oriented (class-based), functional, metaprogramming for large-scale, complex, high-performance)
C# (generic, imperative, object-oriented (class-based), functional, declarative)
Ceylon (generic, imperative, object-oriented (class-based), functional, declarative)
ChucK (imperative, object-oriented, time-based, concurrent, on-the-fly)
Cobra (generic, imperative, object-oriented (class-based), functional, contractual)
Common Lisp (functional, imperative, object-oriented (class-based), aspect-oriented (user may add further paradigms, e.g., logic))
Curl (functional, imperative, object-oriented (class-based), metaprogramming)
Curry (concurrent, functional, logic)
D (generic, imperative, functional, object-oriented (class-based), metaprogramming)
Delphi Object Pascal (generic, imperative, object-oriented (class-based), metaprogramming)
Dylan (functional, object-oriented (class-based))
eC (generic, imperative, object-oriented (class-based))
ECMAScript (functional, imperative, object-oriented (prototype-based))
ActionScript
ECMAScript for XML
JavaScript
JScript
Eiffel (imperative, object-oriented (class-based), generic, functional (agents), concurrent (SCOOP))
F# (functional, generic, object-oriented (class-based), language-oriented)
Fantom (functional, object-oriented (class-based))
Go (imperative, procedural),
Groovy (functional, object-oriented (class-based),imperative,procedural)
Harbour
Hop
J (functional, imperative, object-oriented (class-based))
Julia (imperative, multiple dispatch ("object-oriented"), functional, metaprogramming)
LabVIEW (dataflow, visual)
Lava (object-oriented (class-based), visual)
Lua (functional, imperative, object-oriented (prototype-based))
Mercury (functional, logical, object-oriented)
Metaobject protocols (object-oriented (class-based, prototype-based))
Nemerle (functional, object-oriented (class-based), imperative, metaprogramming)
Objective-C (imperative, object-oriented (class-based), reflective)
OCaml (functional, imperative, object-oriented (class-based), modular)
Oz (functional (evaluation: eager, lazy), logic, constraint, imperative, object-oriented (class-based), concurrent, distributed), and Mozart Programming System cross-platform Oz
Object Pascal (imperative, object-oriented (class-based))
Perl (imperative, functional (can't be purely functional), object-oriented, class-oriented, aspect-oriented (through modules))
PHP (imperative, object-oriented)
Pike
Prograph (dataflow, object-oriented (class-based), visual)
Python (functional, compiled, interpreted, object-oriented (class-based), imperative, metaprogramming, extension, impure, interactive mode, iterative, reflective, scripting)
R (array, interpreted, impure, interactive mode, list-based, object-oriented prototype-based, scripting)
Racket (functional, imperative, object-oriented (class-based) and can be extended by the user)
REBOL (functional, imperative, object-oriented (prototype-based), metaprogramming (dialected))
Red (functional, imperative, object-oriented (prototype-based), metaprogramming (dialected))
ROOP (imperative, logic, object-oriented (class-based), rule-based)
Ruby (imperative, functional, object-oriented (class-based), metaprogramming)
Rust (concurrent, functional, imperative, object-oriented, generic, metaprogramming, compiled)
Scala (functional, object-oriented)
Seed7 (imperative, object-oriented, generic)
SISAL (concurrent, dataflow, functional)
Spreadsheets (functional, visual)
Swift (protocol-oriented, object-oriented, functional, imperative, block-structured)
Tcl (functional, imperative, object-oriented (class-based))
Tea (functional, imperative, object-oriented (class-based))
Windows PowerShell (functional, imperative, pipeline, object-oriented (class-based))
Wolfram Language
Numerical analysis
AIMMS
AMPL
Analytica
GAUSS
GAMS
Julia
Klerer-May System
Mathematica
MATLAB
PROSE
R
Seneca – an Oberon variant
Wolfram Language
Non-English-based languages
Main article: Non-English-based programming languages
Chinese BASIC – Chinese
Fjölnir – Icelandic
Language Symbolique d'Enseignement – French
Lexico – Spanish
Rapira – Russian
ezhil-Tamil
Object-oriented class-based languages
Class-based Object-oriented programming languages support objects defined by their class. Class definitions include member data. Message passing is a key concept (if not the key concept) in Object-oriented languages.

Polymorphic functions parameterized by the class of some of their arguments are typically called methods. In languages with single dispatch, classes typically also include method definitions. In languages with multiple dispatch, methods are defined by generic functions. There are exceptions where single dispatch methods are generic functions (e.g. Bigloo's object system).

Multiple dispatch
Common Lisp
Cecil
Dylan
Julia
Single dispatch
ActionScript 3.0
Actor
Ada 95 and Ada 2005 (multi-purpose language)
APL
BETA
C++
C#
Ceylon
Oxygene (formerly named Chrome)
ChucK
Cobra
ColdFusion
Curl
D
Distributed Application Specification Language (DASL)
Delphi Object Pascal
E
GNU E
eC
Eiffel
Sather
Ubercode
F-Script
Fortran 2003
Fortress
Gambas
Game Maker Language
Harbour
J
Java
Processing
Groovy
Join Java
Tea
X10
LabVIEW
Lava
Lua
Modula-2 (data abstraction, information hiding, strong typing, full modularity)
Modula-3 (added more object-oriented features to Modula-2)
Nemerle
NetRexx
Oberon-2 (full object-orientation equivalence in an original, strongly typed, Wirthian manner)
Object Pascal
Object REXX
Objective-C (a superset of C adding a Smalltalk derived object model and message passing syntax)
OCaml
Oz, Mozart Programming System
Perl 5
PHP
Pike
Prograph
Python (interpretive language, optionally object-oriented)
Revolution (programmer does not get to pick the objects)
Ruby
Scala
Speakeasy
Simula (first object-oriented language, developed by Ole-Johan Dahl and Kristen Nygaard)
Smalltalk (pure object-orientation, developed at Xerox PARC)
F-Script
Little Smalltalk
Pharo
Squeak
Scratch
IBM VisualAge
VisualWorks
SPIN
SuperCollider
VBScript (Microsoft Office 'macro scripting' language)
Visual DataFlex
Visual FoxPro
Visual Prolog
X++
Xojo
XOTcl
Object-oriented prototype-based languages
Prototype-based languages are object-oriented languages where the distinction between classes and instances has been removed:

1C:Enterprise programming language
Actor-Based Concurrent Language (ABCL, ABCL/1, ABCL/R, ABCL/R2, ABCL/c+)
Agora
Cecil
ECMAScript
ActionScript
ECMAScript for XML
JavaScript (first named Mocha, then LiveScript)
JScript
Etoys in Squeak
Io
Lua
MOO
NewtonScript
Obliq
R
REBOL
Red
Self (first prototype-based language, derived from Smalltalk)
TADS
Off-side rule languages
Main article: Off-side rule § Off-side rule languages
Off-side rule languages denote blocks of code by their indentation.

ISWIM, the abstract language that introduced the rule
ABC, Python's parent
Python
Cobra
Boo
Genie
Miranda, Haskell's parent
Orwell
Haskell
Curry
Elixir (, do: blocks)
F#
Nim
Occam
SPIN
Procedural languages
Procedural programming languages are based on the concept of the unit and scope (the data viewing range) of an executable code statement. A procedural program is composed of one or more units or modules, either user coded or provided in a code library; each module is composed of one or more procedures, also called a function, routine, subroutine, or method, depending on the language. Examples of procedural languages include:

Ada (multi-purpose language)
ALGOL (very influential language design; the second high level language compiler)
SMALL Machine ALGOL Like Language
Alma-0
BASIC (these lack most modularity in (especially) versions before about 1990)
BCPL
BLISS
C
C++ (C with objects plus much else, such as, generics through STL)
C# (similar to Java/C++)
Ceylon
CHILL
ChucK (C/Java-like syntax, with new syntax elements for time and parallelism)
COBOL
Cobra
ColdFusion
Combined Programming Language (CPL)
Curl
D
Distributed Application Specification Language (DASL) (combine declarative programming and imperative programming)
eC
ECMAScript
ActionScript
ECMAScript for XML
JavaScript (first named Mocha, then LiveScript)
JScript
Source
Eiffel
Fortran (better modularity in later Standards)
F
GAUSS
Go
Harbour
HyperTalk
Java
Groovy
Join Java
Tea
JOVIAL
Julia
Lasso
Modula-2 (fundamentally based on modules)
Mathematica
MATLAB
Mesa
MUMPS (first release was more modular than other languages of the time; the standard has become even more modular since then)
Nemerle
Nim
Oberon, Oberon-2 (improved, smaller, faster, safer follow-ons for Modula-2)
Component Pascal
Seneca
OCaml
Occam
Oriel
Pascal (successor to ALGOL 60, predecessor of Modula-2)
Free Pascal (FPC)
Object Pascal, Delphi
PCASTL
Perl
Pike
PL/C
PL/I (large general purpose language, originally for IBM mainframes)
Plus
PowerShell
PROSE
Python
R
Rapira
RPG (available only in IBM's System i midrange computers)
Rust
S-Lang
VBScript
Visual Basic
Visual FoxPro
Wolfram Language
Microsoft Dynamics AX (X++)
Query languages
Main article: Query language
Reflective Language
Reflective languages let programs examine and possibly modify their high level structure at runtime or compile-time. This is most common in high-level virtual machine programming languages like Smalltalk, and less common in lower-level programming languages like C. Languages and platforms supporting reflection:

See also: Aspect-oriented programming
Befunge
Ceylon
Charm
ChucK
CLI
C#
Cobra
Component Pascal BlackBox Component Builder
Curl
Cypher
Delphi Object Pascal
eC
ECMAScript
ActionScript
ECMAScript for XML
JavaScript
JScript
Emacs Lisp
Eiffel
Forth
Harbour
Julia
JVM
Java
Groovy
Join Java
X10
Lisp
Clojure
Common Lisp
Dylan
Logo
Scheme
Lua
Maude system
Oberon-2 – ETH Oberon System
Objective-C
PCASTL
Perl
PHP
Pico
Poplog
POP-11
PowerShell
Prolog
Python
REBOL
Red
Ruby
Smalltalk (pure object-orientation, originally from Xerox PARC)
F-Script
Little Smalltalk
Self
Squeak
IBM VisualAge
VisualWorks
Snobol
Tcl
Wolfram Language
XOTcl
X++
Xojo
Rule-based languages
Rule-based languages instantiate rules when activated by conditions in a set of data. Of all possible activations, some set is selected and the statements belonging to those rules execute. Rule-based languages include:[citation needed]

awk
CLIPS
Constraint Handling Rules
Drools
GOAL agent programming language
Jess
OPS5
Prolog
ToonTalk – robots are rules
Mathematica
XSLT[citation needed]
Wolfram Language
Scripting languages
"Scripting language" has two apparently different, but in fact similar, meanings. In a traditional sense, scripting languages are designed to automate frequently used tasks that usually involve calling or passing commands to external programs. Many complex application programs provide built-in languages that let users automate tasks. Those that are interpretive are often called scripting languages.

Recently, many applications have built-in traditional scripting languages, such as Perl or Visual Basic, but there are quite a few native scripting languages still in use. Many scripting languages are compiled to bytecode and then this (usually) platform-independent bytecode is run through a virtual machine (compare to Java virtual machine).

AppleScript
AutoHotKey
AutoIt
AWK
bc
BeanShell
Bash
Ch (Embeddable C/C++ interpreter)
CLI
C# (compiled to bytecode, and running JIT inside VM)
CLIST
ColdFusion
ECMAScript
ActionScript
ECMAScript for XML
JavaScript (first named Mocha, then LiveScript)
JScript
Source
Emacs Lisp
CMS EXEC
EXEC 2
F-Script
Game Maker Language (GML)
ICI
Io
JASS
Julia (still, compiled on the fly to machine code)
JVM
Groovy
Join Java
Ksh
Lasso
Lua
MAXScript
MEL
Object REXX (OREXX, OOREXX)
Oriel
Pascal Script
Perl
PHP (intended for Web servers)
PowerShell
Python
R
REBOL
Red
Rexx
Revolution
Ruby
Sh
Smalltalk
S-Lang
sed
Tea
Tcl
TorqueScript
VBScript
WebDNA, dedicated to database-driven websites
Windows PowerShell (.NET-based CLI)
Winbatch
Many shell command languages such as Unix shell or DIGITAL Command Language (DCL) on VMS have powerful scripting abilities.
Stack-based languages
Main category: Stack-oriented programming languages
Stack-based languages are a type of data-structured language that are based on the stack data structure.

Beatnik
Canonware Onyx[5]
colorForth
Factor
Forth
Joy (all functions work on parameter stacks instead of named parameters)
Piet
Poplog via its implementation language POP-11
PostScript
RPL
S-Lang
Synchronous languages
Main category: Synchronous programming languages
Synchronous programming languages are optimized for programming reactive systems, systems that are often interrupted and must respond quickly. Many such systems are also called realtime systems, and are used often in embedded systems.

Examples:

Argus
Averest
Esterel
Lustre
Signal
Shading languages
See also: Category:Shading languages.
A shading language is a graphics programming language adapted to programming shader effects. Such language forms usually consist of special data types, like "color" and "normal". Due to the variety of target markets for 3D computer graphics.

Real-time rendering
They provide both higher hardware abstraction and a more flexible programming model than previous paradigms which hardcoded transformation and shading equations. This gives the programmer greater control over the rendering process and delivers richer content at lower overhead.

Adobe Graphics Assembly Language (AGAL)[6]
ARB assembly language (ARB assembly)
OpenGL Shading Language (GLSL or glslang)
High-Level Shading Language (HLSL) or DirectX Shader Assembly Language
PlayStation Shader Language (PSSL)
Metal Shading Language
Cg
Shining Rock Shading Language (SRSL)[7]
Spark[8]
Nitrous Shading Language[9]
Godot Shading Language[10]
Offline rendering
Shading languages used in offline rendering produce maximum image quality. Processing such shaders is time-consuming. The computational power required can be expensive because of their ability to produce photorealistic results.

RenderMan Shading Language (RSL)
Houdini VEX Shading Language (VEX)
Gelato Shading Language
Open Shading Language (OSL)
Syntax handling languages
These languages assist with generating lexical analyzers and parsers for context-free grammars.

ANTLR
Coco/R (EBNF with semantics)
GNU bison (FSF's version of Yacc)
GNU Flex (FSF version of Lex)
glex/gyacc (GoboSoft compiler compiler to Eiffel)
lex (Lexical Analysis, from Bell Labs)
M4
Parsing expression grammar (PEG)
Prolog
Emacs Lisp
Lisp
Scheme
yacc (yet another compiler compiler, from Bell Labs)
JavaCC
System languages
The system programming languages are for low level tasks like memory management or task management. A system programming language usually refers to a programming language used for system programming; such languages are designed for writing system software, which usually requires different development approaches when compared with application software.

System software is computer software designed to operate and control the computer hardware, and to provide a platform for running application software. System software includes software categories such as operating systems, utility software, device drivers, compilers, and linkers. Examples of system languages include:

Language	Originator	First appeared	Influenced by	Used for
ESPOL	Burroughs Corporation	1961	ALGOL 60	MCP
PL/I	IBM, SHARE	1964	ALGOL, FORTRAN, some COBOL	Multics
PL360	Niklaus Wirth	1968	ALGOL 60	ALGOL W
C	Dennis Ritchie	1969	BCPL	Most operating system kernels, including Windows NT and most Unix-like systems
PL/S	IBM	196x	PL/I	OS/360
BLISS	Carnegie Mellon University	1970	ALGOL-PL/I[11]	VMS (portions)
PL/8	IBM	197x	PL/I	AIX
PL-6	Honeywell, Inc.	197x	PL/I	CP-6
SYMPL	CDC	197x	JOVIAL	NOS subsystems, most compilers, FSE editor
C++	Bjarne Stroustrup	1979	C, Simula	See C++ Applications[12]
Ada	Jean Ichbiah, S. Tucker Taft	1983	ALGOL 68, Pascal, C++, Java, Eiffel	Embedded systems, OS kernels, compilers, games, simulations, CubeSat, air traffic control, and avionics
D	Digital Mars	2001	C++	Multiple domains[13]
Nim	Andreas Rumpf	2008	Ada, Modula-3, Lisp, C++, Object Pascal, Python, Oberon	OS kernels, compilers, games
Rust	Mozilla Research[14]	2010	C++, Haskell, Erlang, Ruby	Servo layout engine, Redox OS
Swift	Apple Inc.	2014	C, Objective-C, Rust	macOS, iOS app development [b]
Transformation languages
Main article: Transformation language
Visual languages
Main category: Visual programming languages
Visual programming languages let users specify programs in a two-(or more)-dimensional way, instead of as one-dimensional text strings, via graphic layouts of various types. Some dataflow programming languages are also visual languages.

Analytica
Blockly
DRAKON
Fabrik
G (used in LabVIEW)
Lava
Limnor
Max
NXT-G
Pict programming language
Prograph
Pure Data
Quartz Composer
Scratch (written in and based on Squeak, a version of Smalltalk)
Snap!
Simulink
Spreadsheets
Stateflow
Subtext
ToonTalk
VEE
VisSim
Vvvv
XOD (programming language)
EICASLAB
Wirth languages
Computer scientist Niklaus Wirth designed and implemented several influential languages.

ALGOL W
Euler
Modula
Modula-2, Modula-3, variants
Obliq Modula 3 variant
Oberon (Oberon, Oberon-07, Oberon-2)
Component Pascal
Oberon-2
Pascal
Object Pascal (umbrella name for Delphi, Free Pascal, Oxygene, others)
XML-based languages
These are languages based on or that operate on XML.

Ant
Cω
ECMAScript for XML
MXML
LZX
XAML
XPath
XQuery
XProc
eXtensible Stylesheet Language Transformations (XSLT)
See also
Programming paradigm
IEC 61131-3 – a standard for programmable logic controller (PLC) languages
Educational programming language
Esoteric programming language
Notes
 The objects of SQL are collections of database records, called tables. A full programming language can specify algorithms, irrespective of runtime. Thus an algorithm can be considered to generate usable results. In contrast, SQL can only select records which are limited to the current collection, the data at hand in the system, rather than produce a statement of the correctness of the result.
 Swift uses automatic reference counting.
References
 "Understanding Ownership - The Rust Programming Language". doc.rust-lang.org.
 "Smart Pointers - The Rust Programming Language". doc.rust-lang.org.
 Jon Bentley (AT&T) August 1986 CACM 29 (8) "Little Languages", pp 711-721 from his Programming Pearls column
 "Procedural Macros for Generating Code from Attributes". doc.rust-lang.org.
 "Canonware Onyx". Canonware.com. Archived from the original on March 13, 2017. Retrieved July 7, 2018.
 Scabia, Marco. "What is AGAL". Adobe Developer Connection. Adobe. Retrieved 8 May 2018.
 Hodorowicz, Luke. "Shading Languages". www.shiningrocksoftware.com. Shining Rock Software. Retrieved 8 May 2018.
 Foley, Tim; Hanrahan, Pat. "Spark: Modular, Composable Shaders for Graphics Hardware". Intel Software. ACM. Retrieved 8 May 2018.
 "Nitrous FAQ". oxidegames.com. Retrieved 8 May 2018.
 Linietsky, Juan; Manzur, Ariel. "Shading language – Godot Engine latest documentation". docs.godotengine.org. Godot community. Retrieved 8 May 2018.
 Wulf, W.A.; Russell, D.B.; Haberman, A.N. (December 1971). "BLISS: A Language for Systems Programming". Communications of the ACM. 14 (12): 780–790. CiteSeerX 10.1.1.691.9765. doi:10.1145/362919.362936.
 "C++ Applications".
 [1]
 "Mozilla Research". 1 January 2014.
Categories: Lists of programming languagesArray programming languages
Navigation menu
Not logged inTalkContributionsCreate accountLog inArticleTalkReadEditView historySearch
Search Wikipedia
Main page
Contents
Featured content
Current events
Random article
Donate to Wikipedia
Wikipedia store
Interaction
Help
About Wikipedia
Community portal
Recent changes
Contact page
Tools
What links here
Related changes
Upload file
Special pages
Permanent link
Page information
Wikidata item
Cite this page
Print/export
Download as PDF
Printable version

Languages
Беларуская
فارسی
हिन्दी
Magyar
Română
Русский
Tiếng Việt
Edit links
This page was last edited on 8 March 2020, at 11:21 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersStatisticsCookie statementMobile viewWikimedia FoundationPowered by MediaWiki
